name: Build Authn service
permissions: 
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: env to build
        type: environment
#      code_branch:
#        description: branch to build
#        required: false
#        default: main
      trivy_test_scan:
        description: "Run Trivy Test Scan"
        required: true
        type: boolean
        default: true


jobs:
  build:
    name: Build authn image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ECR_REPO: "crdc-hub-authn"
      SERVICE: "authn"
      REGION: "us-east-1"
#      CODE_BRANCH: "${{ github.event.inputs.code_branch }}"
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          submodules: true
      - name: Extract branch name
        id: extract_branch
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          #BRANCH_NAME: ${{ github.ref_name }}
          echo "branch=$BRANCH_NAME" >> "$GITHUB_ENV"
          echo "Current branch is: $BRANCH_NAME"
          #echo "branch=${{ github.ref_name }}" >> "$GITHUB_ENV"
          git fetch --tags --force --quiet
          #tag=$(git tag -l $BRANCH_NAME* | tail -1)
          tag=$(git tag -l $BRANCH_NAME* | sort -V | tail -1)
          if  [ ! -z "$tag" ];
          then
            # Increment the build number if a tag is found
            build_num=$(echo "${tag##*.}")
            build_num=$((build_num+1))
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          else
            # If no tag is found create a new tag name
            build_num=1
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          fi

#      - name: List All Branches
#        run: |
#          git fetch --all
#          git branch -r
#      - name: Set Image Tag
#        env:
#          BRANCH_NAME: ${{ github.ref_name }}
#        run: |
        # Get all tags for the repo and find the latest tag for the branch being built
#          git fetch --tags --force --quiet
#          tag=$(git tag -l $BRANCH_NAME* | tail -1)
#          if  [ ! -z "$tag" ];
#          then
          # Increment the build number if a tag is found
#            build_num=$(echo "${tag##*.}")
#            build_num=$((build_num+1))
#            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
#          else
          # If no tag is found create a new tag name
#            build_num=1
#            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
#          fi

      - name: Build Docker Image
        id: build-image
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          #IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.branch }}.${{ github.run_number }}
          IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Building: $IMAGE_NAME"
          docker build --no-cache -t $IMAGE_NAME -f apps/authn/Dockerfile .

      - name: Run Trivy test scan
        id: trivy-scan
        if: github.event.inputs.trivy_test_scan == 'true'
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'

      - name: Create git tag for image
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.IMAGE_TAG }}
          git push origin ${{ env.IMAGE_TAG }}
   
      - name: Configure AWS Role to assume using OIDC authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        run:  |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_URL
 

      - name: Push Docker images
        id: push-image
        if: success()
        env:
          REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing: $IMAGE_NAME"
          docker push $IMAGE_NAME

      - name: Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08     # v1.6.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
